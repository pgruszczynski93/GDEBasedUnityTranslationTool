// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      D:\UnityProjectsGit\360 Fashion Videos Showcase\Assets/Packages/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEArkusz1Data : IGDEData
    {
        static string QuestionKey = "Question";
		string _Question;
        public string Question
        {
            get { return _Question; }
            set {
                if (_Question != value)
                {
                    _Question = value;
					GDEDataManager.SetString(_key, QuestionKey, _Question);
                }
            }
        }

        static string AnswerAKey = "AnswerA";
		string _AnswerA;
        public string AnswerA
        {
            get { return _AnswerA; }
            set {
                if (_AnswerA != value)
                {
                    _AnswerA = value;
					GDEDataManager.SetString(_key, AnswerAKey, _AnswerA);
                }
            }
        }

        static string AnswerBKey = "AnswerB";
		string _AnswerB;
        public string AnswerB
        {
            get { return _AnswerB; }
            set {
                if (_AnswerB != value)
                {
                    _AnswerB = value;
					GDEDataManager.SetString(_key, AnswerBKey, _AnswerB);
                }
            }
        }

        static string AnswerCKey = "AnswerC";
		string _AnswerC;
        public string AnswerC
        {
            get { return _AnswerC; }
            set {
                if (_AnswerC != value)
                {
                    _AnswerC = value;
					GDEDataManager.SetString(_key, AnswerCKey, _AnswerC);
                }
            }
        }

        static string AnswerDKey = "AnswerD";
		string _AnswerD;
        public string AnswerD
        {
            get { return _AnswerD; }
            set {
                if (_AnswerD != value)
                {
                    _AnswerD = value;
					GDEDataManager.SetString(_key, AnswerDKey, _AnswerD);
                }
            }
        }

        static string CorrectAnsKey = "CorrectAns";
		string _CorrectAns;
        public string CorrectAns
        {
            get { return _CorrectAns; }
            set {
                if (_CorrectAns != value)
                {
                    _CorrectAns = value;
					GDEDataManager.SetString(_key, CorrectAnsKey, _CorrectAns);
                }
            }
        }

        public GDEArkusz1Data(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Arkusz1");
			
            dict.Merge(true, Question.ToGDEDict(QuestionKey));
            dict.Merge(true, AnswerA.ToGDEDict(AnswerAKey));
            dict.Merge(true, AnswerB.ToGDEDict(AnswerBKey));
            dict.Merge(true, AnswerC.ToGDEDict(AnswerCKey));
            dict.Merge(true, AnswerD.ToGDEDict(AnswerDKey));
            dict.Merge(true, CorrectAns.ToGDEDict(CorrectAnsKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetString(QuestionKey, out _Question);
                dict.TryGetString(AnswerAKey, out _AnswerA);
                dict.TryGetString(AnswerBKey, out _AnswerB);
                dict.TryGetString(AnswerCKey, out _AnswerC);
                dict.TryGetString(AnswerDKey, out _AnswerD);
                dict.TryGetString(CorrectAnsKey, out _CorrectAns);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _Question = GDEDataManager.GetString(_key, QuestionKey, _Question);
            _AnswerA = GDEDataManager.GetString(_key, AnswerAKey, _AnswerA);
            _AnswerB = GDEDataManager.GetString(_key, AnswerBKey, _AnswerB);
            _AnswerC = GDEDataManager.GetString(_key, AnswerCKey, _AnswerC);
            _AnswerD = GDEDataManager.GetString(_key, AnswerDKey, _AnswerD);
            _CorrectAns = GDEDataManager.GetString(_key, CorrectAnsKey, _CorrectAns);
        }

        public GDEArkusz1Data ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEArkusz1Data newClone = new GDEArkusz1Data(newKey);

            newClone.Question = Question;
            newClone.AnswerA = AnswerA;
            newClone.AnswerB = AnswerB;
            newClone.AnswerC = AnswerC;
            newClone.AnswerD = AnswerD;
            newClone.CorrectAns = CorrectAns;

            return newClone;
		}

        public GDEArkusz1Data DeepClone()
		{
			GDEArkusz1Data newClone = ShallowClone();
            return newClone;
		}

        public void Reset_Question()
        {
            GDEDataManager.ResetToDefault(_key, QuestionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(QuestionKey, out _Question);
        }

        public void Reset_AnswerA()
        {
            GDEDataManager.ResetToDefault(_key, AnswerAKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerAKey, out _AnswerA);
        }

        public void Reset_AnswerB()
        {
            GDEDataManager.ResetToDefault(_key, AnswerBKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerBKey, out _AnswerB);
        }

        public void Reset_AnswerC()
        {
            GDEDataManager.ResetToDefault(_key, AnswerCKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerCKey, out _AnswerC);
        }

        public void Reset_AnswerD()
        {
            GDEDataManager.ResetToDefault(_key, AnswerDKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerDKey, out _AnswerD);
        }

        public void Reset_CorrectAns()
        {
            GDEDataManager.ResetToDefault(_key, CorrectAnsKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(CorrectAnsKey, out _CorrectAns);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, QuestionKey);
            GDEDataManager.ResetToDefault(_key, AnswerAKey);
            GDEDataManager.ResetToDefault(_key, AnswerBKey);
            GDEDataManager.ResetToDefault(_key, AnswerCKey);
            GDEDataManager.ResetToDefault(_key, AnswerDKey);
            GDEDataManager.ResetToDefault(_key, CorrectAnsKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}

// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      D:\Unity Projects\_P.GRUSZCZYNSKI\TranslationPluginExample\GDATranslationEditorPlugin\Assets/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDELanguageVersionsData : IGDEData
    {
        static string POLISHKey = "POLISH";
		string _POLISH;
        public string POLISH
        {
            get { return _POLISH; }
            set {
                if (_POLISH != value)
                {
                    _POLISH = value;
					GDEDataManager.SetString(_key, POLISHKey, _POLISH);
                }
            }
        }

        static string ENGLISHKey = "ENGLISH";
		string _ENGLISH;
        public string ENGLISH
        {
            get { return _ENGLISH; }
            set {
                if (_ENGLISH != value)
                {
                    _ENGLISH = value;
					GDEDataManager.SetString(_key, ENGLISHKey, _ENGLISH);
                }
            }
        }

        static string GERMANKey = "GERMAN";
		string _GERMAN;
        public string GERMAN
        {
            get { return _GERMAN; }
            set {
                if (_GERMAN != value)
                {
                    _GERMAN = value;
					GDEDataManager.SetString(_key, GERMANKey, _GERMAN);
                }
            }
        }

        static string SPANISHKey = "SPANISH";
		string _SPANISH;
        public string SPANISH
        {
            get { return _SPANISH; }
            set {
                if (_SPANISH != value)
                {
                    _SPANISH = value;
					GDEDataManager.SetString(_key, SPANISHKey, _SPANISH);
                }
            }
        }

        public GDELanguageVersionsData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "LanguageVersions");
			
            dict.Merge(true, POLISH.ToGDEDict(POLISHKey));
            dict.Merge(true, ENGLISH.ToGDEDict(ENGLISHKey));
            dict.Merge(true, GERMAN.ToGDEDict(GERMANKey));
            dict.Merge(true, SPANISH.ToGDEDict(SPANISHKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetString(POLISHKey, out _POLISH);
                dict.TryGetString(ENGLISHKey, out _ENGLISH);
                dict.TryGetString(GERMANKey, out _GERMAN);
                dict.TryGetString(SPANISHKey, out _SPANISH);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _POLISH = GDEDataManager.GetString(_key, POLISHKey, _POLISH);
            _ENGLISH = GDEDataManager.GetString(_key, ENGLISHKey, _ENGLISH);
            _GERMAN = GDEDataManager.GetString(_key, GERMANKey, _GERMAN);
            _SPANISH = GDEDataManager.GetString(_key, SPANISHKey, _SPANISH);
        }

        public GDELanguageVersionsData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDELanguageVersionsData newClone = new GDELanguageVersionsData(newKey);

            newClone.POLISH = POLISH;
            newClone.ENGLISH = ENGLISH;
            newClone.GERMAN = GERMAN;
            newClone.SPANISH = SPANISH;

            return newClone;
		}

        public GDELanguageVersionsData DeepClone()
		{
			GDELanguageVersionsData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_POLISH()
        {
            GDEDataManager.ResetToDefault(_key, POLISHKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(POLISHKey, out _POLISH);
        }

        public void Reset_ENGLISH()
        {
            GDEDataManager.ResetToDefault(_key, ENGLISHKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(ENGLISHKey, out _ENGLISH);
        }

        public void Reset_GERMAN()
        {
            GDEDataManager.ResetToDefault(_key, GERMANKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(GERMANKey, out _GERMAN);
        }

        public void Reset_SPANISH()
        {
            GDEDataManager.ResetToDefault(_key, SPANISHKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(SPANISHKey, out _SPANISH);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, POLISHKey);
            GDEDataManager.ResetToDefault(_key, ENGLISHKey);
            GDEDataManager.ResetToDefault(_key, GERMANKey);
            GDEDataManager.ResetToDefault(_key, SPANISHKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
